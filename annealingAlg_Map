__author__ = 'karic_000'


def search_map():
    a, b, c, d, e, f, g, h, i, j, k = 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'
    letters = (a, b, c, d, e, f, g, h, i, j, k)

    g2, h10, c10, b3, g6, h3, e10, e12, h11, h5, g10 = ('Gates House', 'Grimson Hall',
                                                        'Hooper St. Lot', 'Spring St. Lot',
                                                        'Kelly Gymnasium', 'Woodard Hall',
                                                        'Burnell Hall', 'Tinsley Center',
                                                        'East Campus Commons',
                                                        'Davis Alumni Center',
                                                        'Burril Office Complex')

    places = (g2, h10, c10, b3, g6, h3, e10, e12, h11, h5, g10)

    #              [1 , 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18]
    location_map = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # A
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # B
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # C
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # D
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # E
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # F
                    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # G
                    [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],  # H
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # I
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # J
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]  # K

    row_index = 0   # Keeps track of row number during loop
    index_in_matrix = 0  # Keeps track of index in matrix
    # all_elements = 198

    for row_letter in location_map:
        for number_index in row_letter:
            index_in_row = index_in_matrix - (18*row_index) # # Keeps track of index in row
            if number_index == 1:

                # print("Row number:", row_index+1, "Column number:", index_in_row+1)
                row_index_to_letter(row_index, a, b, c, d, e, f, g, h, i, j, k)
                print("Location's coordinates:", letters[row_index], index_in_row+1)

                # Identify coordinates with locate_name
                locate_name(letters[row_index], row_index)
                # print("Letter:", letters[row_index], "Numbers:", row_index, "Index:", row_index)
                print("Place name:", places[row_index],"\n")

            index_in_matrix += 1
        row_index += 1

    print(index_in_matrix)


    """item_long_memo = []  # The long term memory to be optimized
      cycles =  # The number of cycles per iteration

      memo_length = len(item_long_memo)
      k += 1  # iteration number
      current_location = cooling_schedule()
      old_state = []
      for cycle in cycles:
         # Back up current state
         old_state = item_long_memo  # Clone item LIST, so for loop for elements
         # Randomize method
         perform_randomize(item_long_memo)  # def perform... method
         # Did we improve it? Only keep the new method if improved ("greedy")
        trial_error = calculateScore(item_long_memo)  # If improved, keep it!
        keep = False
        if trial_error < current_error:
            keep = True
        else:
            p = calc_probability(current_error, trial_error, current_location)#def calc_probability
            if p > rand():
                keep = True
        # Should we keep this position?
        if keep: # If yes to keep it
            current_error = trial_error
            # Now check global error
            if trial_error < global_best_error:
                global_best_error = trial_error
                global_best = item = item_long_memo
        else:  # If not keeping
            item_long_memo = old_state  # Clone item LIST, so for loop for elements

      """


def row_index_to_letter(index, a, b, c, d, e, f, g, h, i, j, k):
    letter = None
    if index == 0:
        letter = a
    if index == 1:
        letter = b
    if index == 2:
        letter = c
    if index == 3:
        letter = d
    if index == 4:
        letter = e
    if index == 5:
        letter = f
    if index == 6:
        letter = g
    if index == 7:
        letter = h
    if index == 8:
        letter = i
    if index == 9:
        letter = j
    if index == 10:
        letter = k
    return letter


def locate_name(letter, number):

    if letter == 'G' and number == 2:
        number = 0
        return number
    if letter == 'H' and number == 10:
        number = 1
        return number
    if letter == 'C' and number == 10:
        number = 2
        return number
    if letter == 'B' and number == 3:
        number = 3
        return number
    if letter == 'G' and number == 6:
        number = 4
        return number
    if letter == 'H' and number == 3:
        number = 5
        return number
    if letter == 'E' and number == 10:
        number = 6
        return number
    if letter == 'E' and number == 12:
        number = 7
        return number
    if letter == 'H' and number == 11:
        number = 8
        return number
    if letter == 'H' and number == 5:
        number = 9
        return number
    if letter == 'G' and number == 10:
        number = 10
        return number

search_map()
